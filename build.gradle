plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
    id 'org.graalvm.buildtools.native' version '0.9.18'
}

apply from: "$rootDir/gradle/versioning.gradle"

group = 'ch.so.agi.repochecker'

sourceCompatibility = '17'
targetCompatibility = '17'

compileJava {
    options.compilerArgs.addAll(['--release', '17'])
}

bootJar {
   archiveName = baseName + "-" + version + "-exec.jar"
}

repositories {
    maven { url 'https://repo.spring.io/release' }
    maven { url 'https://jars.interlis.ch/' }
    mavenCentral()
}

configurations.all {
    resolutionStrategy {
        force 'ch.interlis:ili2c-tool:5.4.1'
        force 'ch.interlis:ili2c-core:5.4.1'    
        //force 'ch.interlis:iox-ili:1.21.11'    
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
	
	implementation 'net.sf.saxon:Saxon-HE:10.6'
	
    implementation 'ch.interlis:ili2c-tool:5.4.1'
    implementation 'ch.interlis:ili2c-core:5.4.1'
    implementation 'ch.interlis:ilivalidator:1.14.1'
    implementation 'com.vividsolutions:jts-core:1.14.0' // Warum n√∂tig? 

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

nativeBuild {
    verbose = true
    fallback = false
    //buildArgs.add("--libc=musl")
    //buildArgs.add("--static")
}

import java.text.SimpleDateFormat

tasks.register('versionTxt') {
    description = "Create a version.txt file with some information about the build."
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: interlis-repo-checker
"""
    }
}

tasks.register('copyVersionTxt', Copy) {
    from "version.txt"
    into "src/main/resources/static/"
}

copyVersionTxt.dependsOn(versionTxt)
processResources.dependsOn(copyVersionTxt)

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}


